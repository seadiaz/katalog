// Code generated by MockGen. DO NOT EDIT.
// Source: kafka.go

// Package mock_publishers is a generated GoMock package.
package mock_publishers

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kafka "github.com/segmentio/kafka-go"
	publishers "github.com/walmartdigital/katalog/collector/publishers"
)

// MockWriter is a mock of Writer interface
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
}

// MockWriterMockRecorder is the mock recorder for MockWriter
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockWriter) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockWriterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWriter)(nil).Close))
}

// WriteMessages mocks base method
func (m *MockWriter) WriteMessages(arg0 context.Context, arg1 ...kafka.Message) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WriteMessages", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMessages indicates an expected call of WriteMessages
func (mr *MockWriterMockRecorder) WriteMessages(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessages", reflect.TypeOf((*MockWriter)(nil).WriteMessages), varargs...)
}

// MockWriterFactory is a mock of WriterFactory interface
type MockWriterFactory struct {
	ctrl     *gomock.Controller
	recorder *MockWriterFactoryMockRecorder
}

// MockWriterFactoryMockRecorder is the mock recorder for MockWriterFactory
type MockWriterFactoryMockRecorder struct {
	mock *MockWriterFactory
}

// NewMockWriterFactory creates a new mock instance
func NewMockWriterFactory(ctrl *gomock.Controller) *MockWriterFactory {
	mock := &MockWriterFactory{ctrl: ctrl}
	mock.recorder = &MockWriterFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWriterFactory) EXPECT() *MockWriterFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockWriterFactory) Create(arg0, arg1 string) publishers.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(publishers.Writer)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockWriterFactoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWriterFactory)(nil).Create), arg0, arg1)
}
