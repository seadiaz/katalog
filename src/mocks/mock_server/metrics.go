// Code generated by MockGen. DO NOT EDIT.
// Source: src/server/metrics.go

// Package mock_server is a generated GoMock package.
package mock_server

import (
	gomock "github.com/golang/mock/gomock"
	server "github.com/walmartdigital/katalog/src/server"
	reflect "reflect"
)

// MockMetrics is a mock of Metrics interface
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// InitMetrics mocks base method
func (m *MockMetrics) InitMetrics() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitMetrics")
}

// InitMetrics indicates an expected call of InitMetrics
func (mr *MockMetricsMockRecorder) InitMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitMetrics", reflect.TypeOf((*MockMetrics)(nil).InitMetrics))
}

// IncrementCounter mocks base method
func (m *MockMetrics) IncrementCounter(arg0 string, arg1 ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "IncrementCounter", varargs...)
}

// IncrementCounter indicates an expected call of IncrementCounter
func (mr *MockMetricsMockRecorder) IncrementCounter(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementCounter", reflect.TypeOf((*MockMetrics)(nil).IncrementCounter), varargs...)
}

// DestroyMetrics mocks base method
func (m *MockMetrics) DestroyMetrics() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DestroyMetrics")
}

// DestroyMetrics indicates an expected call of DestroyMetrics
func (mr *MockMetricsMockRecorder) DestroyMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyMetrics", reflect.TypeOf((*MockMetrics)(nil).DestroyMetrics))
}

// MockMetricsFactory is a mock of MetricsFactory interface
type MockMetricsFactory struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsFactoryMockRecorder
}

// MockMetricsFactoryMockRecorder is the mock recorder for MockMetricsFactory
type MockMetricsFactoryMockRecorder struct {
	mock *MockMetricsFactory
}

// NewMockMetricsFactory creates a new mock instance
func NewMockMetricsFactory(ctrl *gomock.Controller) *MockMetricsFactory {
	mock := &MockMetricsFactory{ctrl: ctrl}
	mock.recorder = &MockMetricsFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetricsFactory) EXPECT() *MockMetricsFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockMetricsFactory) Create() server.Metrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create")
	ret0, _ := ret[0].(server.Metrics)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockMetricsFactoryMockRecorder) Create() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMetricsFactory)(nil).Create))
}
